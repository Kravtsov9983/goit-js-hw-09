{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAqCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,EA5CA,CACXQ,QAASC,SAASC,cAAc,SAChCC,WAAYF,SAASC,cAAc,qBACnCE,UAAWH,SAASC,cAAc,oBAClCG,OAAQJ,SAASC,cAAc,wBAG5BF,QAAQM,iBAAiB,UAmB9B,SAAuBC,GACrBA,EAAMC,iBACN,MAAMH,EAASI,OAAOF,EAAMG,OAAOL,OAAOM,OACpCnB,EAAQiB,OAAOF,EAAMG,OAAOlB,MAAMmB,OAClCC,EAAOH,OAAOF,EAAMG,OAAOE,KAAKD,QArBxC,SAAyBN,EAAQQ,EAAOD,GACtC,IAAK,IAAIE,EAAI,EAAGA,GAAKT,EAAQS,GAAK,EAAG,CAEnCxB,EAAcwB,EADFD,EAAQD,GAAQE,EAAI,IAE7BC,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,KACVwB,EAAA5B,GAAS6B,OAAOC,QACrB,uBAAqB3B,QAAiBC,SAGzC2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,KACXwB,EAAA5B,GAAS6B,OAAOG,QACrB,sBAAoB7B,QAAeC,Q,EAY3C6B,CAAgBhB,EAAQb,EAAOoB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEls: document.querySelector('.form'),\n  firstDelay: document.querySelector('input[name=delay]'),\n  delayStep: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n};\n\nrefs.formEls.addEventListener('submit', onCatFunction);\n\nfunction onCycleFunction(amount, delay, step) {\n  for (let i = 1; i <= amount; i += 1) {\n    let total = delay + step * (i - 1);\n    createPromise(i, total)\n      .then(({ position, delay }) => {\n        return Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        return Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction onCatFunction(event) {\n  event.preventDefault();\n  const amount = Number(event.target.amount.value);\n  const delay = Number(event.target.delay.value);\n  const step = Number(event.target.step.value);\n\n  onCycleFunction(amount, delay, step);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","formEls","document","querySelector","firstDelay","delayStep","amount","addEventListener","event","preventDefault","Number","target","value","step","delay1","i","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$onCycleFunction"],"version":3,"file":"03-promises.3cf98b03.js.map"}